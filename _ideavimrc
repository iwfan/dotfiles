set showmode
set number
set relativenumber
set scrolloff=5
set hlsearch
set incsearch
set ignorecase
set smartcase
set infercase

" 启用vim surround功能: ys / cs / ds /S
set surround
" 启用 multiple cursors <A-n> / <A-x> / <A-p> / g<A-n>
set multiple-cursors
set commentary
set argtextobj
set easymotion
set textobj-entire
set exchange
set ReplaceWithRegister
set highlightedyank

set ideajoin
set ideamarks
set idearefactormode=keep
" 共享系统粘贴板
set clipboard^=unnamed,unnamedplus,ideaput

let g:argtextobj_pairs="[:],(:),<:>"

" 自动切换为英文, 需要 IdeaVimExtension 中文
set keep-english-in-normal
" set keep-english-in-normal-and-restore-in-insert


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""" VIM KEY MAPPING
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 使用 space 作为 leader key
let mapleader = " "

" Don't use Ex mode, use Q for formatting.
map Q gq
" 在折行情况下好用
noremap j gj
noremap k gk
noremap 0 g0
noremap $ g$
" 不记录到寄存器
noremap c "_c
" 上一个单词
" noremap ]w g*
" " 下一个单词
" noremap [w g#

nnoremap <A-j> :m .+1<CR>==
nnoremap <A-k> :m .-2<CR>==
inoremap <A-j> <Esc>:m .+1<CR>==gi
inoremap <A-k> <Esc>:m .-2<CR>==gi
vnoremap <A-j> :m '>+1<CR>gv=gv
vnoremap <A-k> :m '<-2<CR>gv=gv

" 删除一行,不会记录到剪切板中
noremap <leader><backspace> "_dd
" 跳转行首
noremap H g^
" 跳转行尾
noremap L g_
" 取消高亮
noremap <leader><cr> :noh<CR>
" 跳转对应括号
noremap <leader>y "+y
noremap <leader>p "_dP
noremap <leader>x ^d$

noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

inoremap <C-h> <backspace>
inoremap <C-f> <right>
inoremap <C-b> <left>
inoremap <C-j> <down>
inoremap <C-k> <up>
inoremap <C-a> <home>
inoremap <C-e> <end>
inoremap <C-d> <delete>
inoremap <C-i> <C-o>o
inoremap <C-v> <C-o><C-r>*

" 复制当前行
nnoremap <leader>d Yp
" 复制选中内容
vnoremap <leader>d y'>p
" 向下添加新空行，并退出 insert mode
nnoremap <leader>i o<Esc>
" 向上添加新空行，并退出 insert mode
nnoremap <leader>I O<Esc>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""  ACTION BINDINGS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""

noremap / :action Replace<CR>

noremap <C-n> :action SelectNextOccurrence<CR>

noremap <leader>r :action Refactorings.QuickListPopupAction<CR>
noremap <leader>w :action SurroundWith<CR>
" noremap <leader>f :action AceAction<CR>

" map f <Plug>(easymotion-f)
" map F <Plug>(easymotion-F)
" map t <Plug>(easymotion-t)
" map T <Plug>(easymotion-T)
noremap gf :action AceTargetAction<CR>

noremap <leader>u :action ShowUsages<CR>
noremap <leader>U :action FindUsages<CR>
noremap <leader>t :action FileStructurePopup<CR>
noremap <leader>qr :action ReopenClosedTab<CR>
noremap <leader>qm :action MoveEditorToOppositeTabGroup<CR>

" navigate paragraph
noremap ]q :action EditorForwardParagraph<CR>
noremap [q :action EditorBackwardParagraph<CR>
" navigate element
noremap [w :action GotoPrevElementUnderCaretUsage<CR>
noremap ]w :action GotoNextElementUnderCaretUsage<CR>
" navigate method
noremap ]e :action MethodDown<CR>
noremap [e :action MethodUp<CR>
" naviagte errors
noremap ]d :action GotoNextError<CR>
noremap [d :action GotoPreviousError<CR>
noremap \d :action ShowErrorDescription<CR>
" navagate occurrence
noremap <leader>a :action SelectAllOccurrences<CR>
noremap ]a :action SelectNextOccurrence<CR>
noremap [a :action UnselectPreviousOccurrence<CR>
" navigate bookmarks
noremap ]s :action GotoNextBookmark<CR>
noremap [s :action GotoPreviousBookmark<CR>
noremap \s :action ShowBookmarks<CR>
noremap <leader>s :action ToggleBookmarkWithMnemonic<CR>
noremap <bs>s :action ToggleBookmarkWithMnemonic<CR>
" navigate changes
noremap ]c :action VcsShowNextChangeMarker<CR>
noremap [c :action VcsShowPrevChangeMarker<CR>
noremap \c :action VcsShowCurrentChangeMarker<CR>
noremap <bs>c :action Vcs.RollbackChangedLines<CR>
noremap <leader>c :action Vcs.QuickListPopupAction<CR>

noremap <leader><cr> :action ProblemsView.QuickFixes<CR>

" make AceJump acts like easymotion in vim
noremap <leader>; :action AceLineAction<CR>
noremap <leader>' :action AceDeclarationAction<CR>
