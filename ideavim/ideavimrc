set showmode
set number
set relativenumber
set scrolloff=5
set hlsearch
set incsearch
set smartcase
set clipboard^=unnamed,unnamedplus,ideaput

set surround
set commentary
set argtextobj
set easymotion
set multiple-cursors
set textobj-entire
set exchange
set ReplaceWithRegister
set highlightedyank
set ideajoin
set ideamarks
set idearefactormode=keep

" 自动切换为英文, 需要 IdeaVimExtension 中文
set keep-english-in-normal
" set keep-english-in-normal-and-restore-in-insert

let g:argtextobj_pairs="[:],(:),<:>"
let g:NERDTreeMapActivateNode="l"
let g:NERDTreeMapPreview="gl"
let g:NERDTreeMapOpenVSplit="<C-v>"
let g:NERDTreeMapJumpRoot="H"
let g:NERDTreeMapJumpParent="h"


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""" VIM KEY MAPPING
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 使用 space 作为 leader key
let mapleader = " "

" Don't use Ex mode, use Q for formatting.
map Q gq
" 在折行情况下好用
map j gj
map k gk
map 0 g0
map $ g$

" 删除一行,不会记录到剪切板中
nnoremap <leader><backspace> "_dd
" 取消高亮
nnoremap <esc> :noh<CR><esc>
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
inoremap <C-h> <backspace>
inoremap <C-f> <right>
inoremap <C-b> <left>
inoremap <C-j> <down>
inoremap <C-k> <up>
inoremap <C-a> <home>
inoremap <C-e> <end>
inoremap <C-d> <delete>
inoremap <C-v> <C-o><C-r>*
vnoremap p "_dP
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""  ACTION BINDINGS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""

nnoremap / :action Replace<CR>
nnoremap <leader>f <Plug>(easymotion-s)
nnoremap <leader>e <Plug>(easymotion-f)

nnoremap <Enter> :action EditorSelectWord<CR>
nnoremap <C-S-Enter> :action EditorUnSelectWord<CR>
nnoremap <C-n> :action SelectNextOccurrence<CR>
noremap <leader>r :action Refactorings.QuickListPopupAction<CR>
noremap <leader>w :action SurroundWith<CR>

map gf :action AceTargetAction<CR>
map <leader>u :action ShowUsages<CR>
map <leader>U :action FindUsages<CR>
noremap <leader>t :action FileStructurePopup<CR>
noremap <leader>qr :action ReopenClosedTab<CR>
noremap <leader>qm :action MoveEditorToOppositeTabGroup<CR>

" navigate paragraph
noremap ]q :action EditorForwardParagraph<CR>
noremap [q :action EditorBackwardParagraph<CR>
" navigate element
noremap [w :action GotoPrevElementUnderCaretUsage<CR>
noremap ]w :action GotoNextElementUnderCaretUsage<CR>
" navigate method
noremap ]e :action MethodDown<CR>
noremap [e :action MethodUp<CR>
" naviagte errors
noremap ]d :action GotoNextError<CR>
noremap [d :action GotoPreviousError<CR>
noremap \d :action ShowErrorDescription<CR>
" navagate occurrence
noremap <leader>a :action SelectAllOccurrences<CR>
noremap ]a :action SelectNextOccurrence<CR>
noremap [a :action UnselectPreviousOccurrence<CR>
" navigate bookmarks
noremap ]s :action GotoNextBookmark<CR>
noremap [s :action GotoPreviousBookmark<CR>
noremap \s :action ShowBookmarks<CR>
noremap <leader>s :action ToggleBookmarkWithMnemonic<CR>
noremap <bs>s :action ToggleBookmarkWithMnemonic<CR>
" navigate changes
noremap ]c :action VcsShowNextChangeMarker<CR>
noremap [c :action VcsShowPrevChangeMarker<CR>
noremap \c :action VcsShowCurrentChangeMarker<CR>
noremap <bs>c :action Vcs.RollbackChangedLines<CR>
noremap <leader>c :action Vcs.QuickListPopupAction<CR>

noremap <leader><cr> :action ProblemsView.QuickFixes<CR>

" make AceJump acts like easymotion in vim
noremap <leader>; :action AceLineAction<CR>
noremap <leader>' :action AceDeclarationAction<CR>

" 跳转行首
nnoremap H :action EditorLineStart<CR>
" vnoremap H :action EditorLineStartWithSelection<CR>
vnoremap H g^
" 跳转行尾
nnoremap L :action EditorLineEnd<CR>
" vnoremap L h:action EditorLineEndWithSelection<CR>
vnoremap L g_
